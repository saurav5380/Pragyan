# services/api/alembic/env.py
from logging.config import fileConfig
from pathlib import Path
import os, sys, importlib, pkgutil

from alembic import context
from alembic.config import Config
from sqlalchemy import engine_from_config, pool

# ----------------------------
# Resolve Alembic config
# ----------------------------
if getattr(context, "config", None) is not None:
    config = context.config
else:
    here = Path(__file__).resolve().parent         # .../services/api/alembic
    ini_path = here.parent / "alembic.ini"         # .../services/api/alembic.ini
    config = Config(str(ini_path))

if config.config_file_name:
    fileConfig(config.config_file_name)

# ----------------------------
# Make services/api importable
# ----------------------------
API_DIR = Path(__file__).resolve().parents[1]      # .../services/api
if str(API_DIR) not in sys.path:
    sys.path.append(str(API_DIR))

# ----------------------------
# Import the canonical Base
# (you said Base is in services/api/db.py)
# ----------------------------
from db import Base
target_metadata = Base.metadata

# ----------------------------
# Import ALL model modules so they register on Base.metadata
# Supports:
#   - app/models.py  (single file)
#   - app/models/    (package with multiple modules)
# ----------------------------
MODELS_PKG = "app.models"   # adjust if needed

def _import_models():
    try:
        mod = importlib.import_module(MODELS_PKG)
    except ModuleNotFoundError as e:
        raise SystemExit(
            f"Alembic: Could not import '{MODELS_PKG}'. "
            "Ensure 'services/api/app/__init__.py' exists and the path is correct."
        ) from e

    pkg_path = getattr(mod, "__path__", None)
    if pkg_path is not None:  # it's a package: import submodules
        for _, name, _ in pkgutil.walk_packages(pkg_path, mod.__name__ + "."):
            importlib.import_module(name)

_import_models()

# Guard: fail early if nothing registered (prevents accidental drop-all)
if not target_metadata.tables:
    raise SystemExit(
        "Alembic: No tables found in Base.metadata after importing models. "
        "Check that all ORM classes inherit from db.Base and MODELS_PKG is correct."
    )

# ----------------------------
# Prefer env var for DB URL; swap async->sync driver for Alembic
# ----------------------------
db_url = os.getenv("DATABASE_URL")
if db_url:
    if "+asyncpg" in db_url:
        db_url = db_url.replace("+asyncpg", "+psycopg")
    config.set_main_option("sqlalchemy.url", db_url)

# ----------------------------
# Ignore TimescaleDB internals during autogenerate
# ----------------------------
def include_object(object_, name, type_, reflected, compare_to):
    schema = getattr(object_, "schema", None)
    if schema and (
        schema.startswith("_timescaledb")
        or schema == "timescaledb_catalog"
        or schema == "timescaledb_information"
    ):
        return False
    return True

# Avoid empty autogenerated revisions
def process_revision_directives(context_, revision, directives):
    if getattr(context_.config, "cmd_opts", None) and getattr(context_.config.cmd_opts, "autogenerate", False):
        script = directives[0]
        if script.upgrade_ops.is_empty():
            directives[:] = []

# ----------------------------
# Offline / Online runners
# ----------------------------
def run_migrations_offline() -> None:
    url = config.get_main_option("sqlalchemy.url")
    context.configure(
        url=url,
        target_metadata=target_metadata,
        literal_binds=True,
        dialect_opts={"paramstyle": "named"},
        compare_type=True,
        compare_server_default=True,
        include_object=include_object,
        process_revision_directives=process_revision_directives,
    )
    with context.begin_transaction():
        context.run_migrations()

def run_migrations_online() -> None:
    connectable = engine_from_config(
        config.get_section(config.config_ini_section, {}),
        prefix="sqlalchemy.",
        poolclass=pool.NullPool,
    )
    with connectable.connect() as connection:
        context.configure(
            connection=connection,
            target_metadata=target_metadata,
            compare_type=True,
            compare_server_default=True,
            include_object=include_object,
            process_revision_directives=process_revision_directives,
        )
        with context.begin_transaction():
            context.run_migrations()

if context.is_offline_mode():
    run_migrations_offline()
else:
    run_migrations_online()
